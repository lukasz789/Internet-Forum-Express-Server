import mongoose from 'mongoose'
import bcrypt from 'bcryptjs'
import JWT from 'jsonwebtoken'

const UserSchema = new mongoose.Schema({
  username: {
    type: String,
    required: [true, 'Please provide username'],
    minLength: 6,
    maxLength: 20,
    trim: true,
    unique: true,
  },
  password: {
    type: String,
    required: [true, 'Please provide password'],
    minLength: 6,
  },
})

// pre() and post() middlewares in mongoose
// -> before saving run callback function hashing password;
//    query middlewares(count, countDocuments, update, updateOne etc) WONT trigger this hook
UserSchema.pre('save', async function () {
  // 10 default
  const salt = await bcrypt.genSalt()
  // `this` pointing to document being saved
  this.password = await bcrypt.hash(this.password, salt)
})

// custom methods created
// (default in mongoose: https://mongoosejs.com/docs/api/document.html)
UserSchema.methods.setupJWT = function () {
  // `_id` from mongoDB, autogenerated
  return JWT.sign({ userId: this._id }, process.env.JWT_SECRET, {
    expiresIn: '1d',
  })
}
// -> password validation required for login
UserSchema.methods.validatePassword = async function (sentPassword) {
  return await bcrypt.compare(sentPassword, this.password)
}

export default mongoose.model('User', UserSchema)
